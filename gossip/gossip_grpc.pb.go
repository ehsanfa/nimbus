// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: gossip/gossip.proto

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GossipService_Spread_FullMethodName  = "/gossip.GossipService/Spread"
	GossipService_CatchUp_FullMethodName = "/gossip.GossipService/CatchUp"
)

// GossipServiceClient is the client API for GossipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipServiceClient interface {
	Spread(ctx context.Context, in *SpreadRequest, opts ...grpc.CallOption) (*SpreadResponse, error)
	CatchUp(ctx context.Context, in *CatchupRequest, opts ...grpc.CallOption) (*CatchupResponse, error)
}

type gossipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipServiceClient(cc grpc.ClientConnInterface) GossipServiceClient {
	return &gossipServiceClient{cc}
}

func (c *gossipServiceClient) Spread(ctx context.Context, in *SpreadRequest, opts ...grpc.CallOption) (*SpreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpreadResponse)
	err := c.cc.Invoke(ctx, GossipService_Spread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipServiceClient) CatchUp(ctx context.Context, in *CatchupRequest, opts ...grpc.CallOption) (*CatchupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatchupResponse)
	err := c.cc.Invoke(ctx, GossipService_CatchUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipServiceServer is the server API for GossipService service.
// All implementations must embed UnimplementedGossipServiceServer
// for forward compatibility.
type GossipServiceServer interface {
	Spread(context.Context, *SpreadRequest) (*SpreadResponse, error)
	CatchUp(context.Context, *CatchupRequest) (*CatchupResponse, error)
	mustEmbedUnimplementedGossipServiceServer()
}

// UnimplementedGossipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGossipServiceServer struct{}

func (UnimplementedGossipServiceServer) Spread(context.Context, *SpreadRequest) (*SpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spread not implemented")
}
func (UnimplementedGossipServiceServer) CatchUp(context.Context, *CatchupRequest) (*CatchupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CatchUp not implemented")
}
func (UnimplementedGossipServiceServer) mustEmbedUnimplementedGossipServiceServer() {}
func (UnimplementedGossipServiceServer) testEmbeddedByValue()                       {}

// UnsafeGossipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServiceServer will
// result in compilation errors.
type UnsafeGossipServiceServer interface {
	mustEmbedUnimplementedGossipServiceServer()
}

func RegisterGossipServiceServer(s grpc.ServiceRegistrar, srv GossipServiceServer) {
	// If the following call pancis, it indicates UnimplementedGossipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GossipService_ServiceDesc, srv)
}

func _GossipService_Spread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).Spread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GossipService_Spread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).Spread(ctx, req.(*SpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GossipService_CatchUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatchupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServiceServer).CatchUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GossipService_CatchUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServiceServer).CatchUp(ctx, req.(*CatchupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GossipService_ServiceDesc is the grpc.ServiceDesc for GossipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.GossipService",
	HandlerType: (*GossipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spread",
			Handler:    _GossipService_Spread_Handler,
		},
		{
			MethodName: "CatchUp",
			Handler:    _GossipService_CatchUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gossip/gossip.proto",
}
